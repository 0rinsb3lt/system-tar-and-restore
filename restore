#!/bin/bash

clear

mount_all() {
  echo -e "\n---------------MAKING WORKING DIRECTORY---------------"
  mkdir /mnt/target 2>&1 && echo SUCCESS || echo WARNING
  sleep 1

  echo -e "\n---------------MOUNTING $BRroot (/)---------------"
  mount $BRroot /mnt/target 2>&1 && echo SUCCESS || echo WARNING

  if [ -n "$BRhome" ]; then
    echo -e "\n---------------MOUNTING $BRhome (/home)---------------"
    mkdir /mnt/target/home 2>&1
    mount $BRhome /mnt/target/home 2>&1 && echo SUCCESS || echo WARNING
  fi

  if [ -n "$BRboot" ]; then
    echo -e "\n---------------MOUNTING $BRboot (/boot)---------------"
    mkdir /mnt/target/boot 2>&1
    mount $BRboot /mnt/target/boot 2>&1 && echo SUCCESS || echo WARNING
  fi 
}

show_summary() {
  if [ -n "$BRgrub" ]; then
    BRbootloader=Grub
  elif [ -n "$BRsyslinux" ]; then
    BRbootloader=Syslinux
  fi

  echo "Distro to restore: $BRdistro
Root Partition: $BRroot $BRfsystem"

  if [ "x$BRfsystem" = "xbtrfs" ] && [ "x$BRrootsubvol" = "xy" ]; then
    echo "Root Subvolume: $BRrootsubvolname"

    if [ "x$BRhomesubvol" = "xy" ]; then
      echo "Home Subvolume: Yes"
    fi

    if [ "x$BRvarsubvol" = "xy" ]; then
      echo "Var Subvolume: Yes"
    fi

    if [ "x$BRusrsubvol" = "xy" ]; then
      echo "Usr Subvolume: Yes"
    fi
  fi

  if [ -n "$BRswap" ]; then
    echo "Swap Partition: $BRswap"
  fi

  if [ -n "$BRboot" ]; then
    echo "Boot Partition: $BRboot $BRbootfsystem"
  fi

  if [ -n "$BRhome" ]; then
    echo "Home Partition: $BRhome $BRhomefsystem"
  fi

  echo "$BRbootloader Location:  $BRgrub $BRsyslinux"
  echo "Backup File: $BRfile $BRurl"
}

mount_dev_proc_sys () {
  mount --bind /dev /mnt/target/dev
  mount -t proc /proc /mnt/target/proc
  mount -t sysfs /sys /mnt/target/sys 2>&1 && echo SUCCESS  || echo FAILED
}

generate_fstab () {
  echo  "tmpfs     /tmp          tmpfs     nodev,nosuid      0  0" > /mnt/target/etc/fstab 

  if [ "x$BRfsystem" = "xbtrfs" ] && [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
    echo "$BRroot   /  btrfs compress=lzo,subvol=$BRrootsubvolname,noatime 0 0" >> /mnt/target/etc/fstab
  elif [ "x$BRfsystem" = "xbtrfs" ] && [ "x$BRrootsubvol" = "xn" ] || [ "x$BRrootsubvol" = "xN" ]; then
    echo "$BRroot  /  btrfs  defaults,noatime    0  0" >> /mnt/target/etc/fstab
  else
    echo "$BRroot  /  $BRfsystem  defaults,noatime    0  1" >> /mnt/target/etc/fstab
  fi

  if [ -n "$BRswap" ]; then
    echo "$BRswap    swap   swap    defaults    0  0" >> /mnt/target/etc/fstab
  fi

  if [ -n "$BRhome" ]; then
    echo "$BRhome  /home  $BRhomefsystem  defaults,noatime    0  2" >> /mnt/target/etc/fstab
  fi

  if [ -n "$BRboot" ]; then
    echo "$BRboot  /boot  $BRbootfsystem  defaults    0  1" >> /mnt/target/etc/fstab
  fi

  sed -n 's|^/dev/\([sh]d[a-z][0-9]\).*|\1|p' </mnt/target/etc/fstab > /mnt/target/etc/fstab2

  while read LINE; do   
    UUID=`ls -l /dev/disk/by-uuid | grep "$LINE" | sed -n 's/^.* \([^ ]*\) -> .*$/\1/p'`
    sed -i "s|^/dev/${LINE}|UUID=${UUID}|" /mnt/target/etc/fstab
  done </mnt/target/etc/fstab2
  
  rm /mnt/target/etc/fstab2
}

build_initramfs () {
  if [ $BRdistro = Arch ]; then
    chroot /mnt/target mkinitcpio -p linux  2>&1 && echo SUCCESS  || echo WARNING

  elif [ $BRdistro = Debian ]; then
    list=(`ls /mnt/target/boot/vmlinuz* | sed 's_/mnt/target/boot/vmlinuz-*__'`)
    BRmax=${list[0]}
    for f in ${list[@]}; do
      if [[ "$f" > "$BRmax" ]]; then
        BRmax=$f
      fi
    done
    BRinitrd=$BRmax
    chroot /mnt/target update-initramfs -u -k $BRinitrd 2>&1 && echo SUCCESS  || echo WARNING

  elif [ $BRdistro = Fedora ]; then
    list=(`ls /mnt/target/boot/vmlinuz* | sed 's_/mnt/target/boot/vmlinuz-*__'`)
    BRmax=${list[0]}
    for f in ${list[@]}; do
      if [[ "$f" > "$BRmax" ]]; then
        BRmax=$f
      fi
    done
    BRinitrd=$BRmax  
    echo working...
    chroot /mnt/target dracut --force /boot/initramfs-$BRinitrd.img $BRinitrd 2>&1 && echo SUCCESS  || echo WARNING
  fi
}

install_bootloader () {
  if [ -n "$BRgrub" ]; then
    echo -e "\n---------------INSTALLING AND UPDATING GRUB2 IN $BRgrub---------------"
    if [ $BRdistro = Arch ]; then
      chroot /mnt/target grub-install --target=i386-pc  $BRgrub 
      chroot /mnt/target grub-mkconfig -o /boot/grub/grub.cfg  2>&1 && echo SUCCESS  || echo FAILED 
    elif [ $BRdistro = Debian ]; then
      chroot /mnt/target grub-install  $BRgrub
      chroot /mnt/target grub-mkconfig -o /boot/grub/grub.cfg  2>&1 && echo SUCCESS  || echo FAILED 
    elif [ $BRdistro = Fedora ]; then
      chroot /mnt/target grub2-install $BRgrub
      chroot /mnt/target grub2-mkconfig -o /boot/grub2/grub.cfg  2>&1 && echo SUCCESS  || echo FAILED 
    fi

  elif [ -n "$BRsyslinux" ]; then
    echo -e "\n---------------INSTALLING AND CONFIGURING Syslinux IN $BRsyslinux---------------"
    if [ $BRdistro = Arch ]; then
      chroot /mnt/target syslinux-install_update -i -a -m
      echo -e "UI menu.c32\nPROMPT 0\nMENU TITLE Boot Menu\nTIMEOUT 50\nDEFAULT arch" > /mnt/target/boot/syslinux/syslinux.cfg
      if [ "x$BRfsystem" = "xbtrfs" ] && [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
        echo -e "LABEL arch\n\tMENU LABEL Arch Linux\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=$BRroot rootflags=subvol=$BRrootsubvolname ro\n\tINITRD ../initramfs-linux.img" >> /mnt/target/boot/syslinux/syslinux.cfg
        echo -e "LABEL archfallback\n\tMENU LABEL Arch Linux Fallback\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=$BRroot rootflags=subvol=$BRrootsubvolname ro\n\tINITRD ../initramfs-linux-fallback.img" >> /mnt/target/boot/syslinux/syslinux.cfg
      else
        echo -e "LABEL arch\n\tMENU LABEL Arch Linux\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=$BRroot  ro\n\tINITRD ../initramfs-linux.img" >> /mnt/target/boot/syslinux/syslinux.cfg
        echo -e "LABEL archfallback\n\tMENU LABEL Arch Linux Fallback\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=$BRroot  ro\n\tINITRD ../initramfs-linux-fallback.img" >> /mnt/target/boot/syslinux/syslinux.cfg
      fi

    elif [ $BRdistro = Debian ]; then
      list=(`ls /mnt/target/boot/vmlinuz* | sed 's_/mnt/target/boot/vmlinuz-*__'`)
      BRmax=${list[0]}
      for f in ${list[@]}; do
        if [[ "$f" > "$BRmax" ]]; then
        BRmax=$f
        fi
      done
      BRinitrd=$BRmax  
      mkdir -p /mnt/target/boot/syslinux
      chroot /mnt/target extlinux -i /boot/syslinux
      if [ -n "$BRboot" ]; then
        BRdev=`echo $BRboot | cut -c -8`
        BRpart=`echo $BRboot | cut -c 9-`
        sfdisk $BRdev -A $BRpart
      else
        BRdev=`echo $BRroot | cut -c -8`
        BRpart=`echo $BRroot | cut -c 9-`
        sfdisk $BRdev -A $BRpart
      fi  
      dd bs=440 count=1 conv=notrunc if=/mnt/target/usr/lib/syslinux/mbr.bin of=$BRsyslinux
      cp /mnt/target/usr/lib/syslinux/menu.c32 /mnt/target/boot/syslinux/
      echo -e "UI menu.c32\nPROMPT 0\nMENU TITLE Boot Menu\nTIMEOUT 50" > /mnt/target/boot/syslinux/syslinux.cfg
      echo -e "PROMPT 1\nTIMEOUT 50\nDEFAULT linux" >> /mnt/target/boot/syslinux/syslinux.cfg
      if [ "x$BRfsystem" = "xbtrfs" ] && [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
        echo -e "LABEL linux\n\tLINUX ../vmlinuz-$BRinitrd\n\tAPPEND root=$BRroot rootflags=subvol=$BRrootsubvolname ro quiet\n\tINITRD ../initrd.img-$BRinitrd" >> /mnt/target/boot/syslinux/syslinux.cfg
      else
        echo -e "LABEL linux\n\tLINUX ../vmlinuz-$BRinitrd\n\tAPPEND root=$BRroot ro quiet\n\tINITRD ../initrd.img-$BRinitrd" >> /mnt/target/boot/syslinux/syslinux.cfg
      fi

    elif [ $BRdistro = Fedora ]; then
      list=(`ls /mnt/target/boot/vmlinuz* | sed 's_/mnt/target/boot/vmlinuz-*__'`)
      BRmax=${list[0]}
      for f in ${list[@]}; do
        if [[ "$f" > "$BRmax" ]]; then
          BRmax=$f
        fi
      done
      BRinitrd=$BRmax  
      mkdir -p /mnt/target/boot/syslinux
      chroot /mnt/target extlinux -i /boot/syslinux
      if [ -n "$BRboot" ]; then
        BRdev=`echo $BRboot | cut -c -8`
        BRpart=`echo $BRboot | cut -c 9-`
        sfdisk $BRdev -A $BRpart
      else
        BRdev=`echo $BRroot | cut -c -8`
        BRpart=`echo $BRroot | cut -c 9-`
        sfdisk $BRdev -A $BRpart
      fi
      dd bs=440 count=1 conv=notrunc if=/mnt/target/usr/share/syslinux/mbr.bin of=$BRsyslinux
      cp /mnt/target/usr/share/syslinux/menu.c32 /mnt/target/boot/syslinux/
      echo -e "UI menu.c32\nPROMPT 0\nMENU TITLE Boot Menu\nTIMEOUT 50" > /mnt/target/boot/syslinux/syslinux.cfg
      echo -e "PROMPT 1\nTIMEOUT 50\nDEFAULT linux" >> /mnt/target/boot/syslinux/syslinux.cfg
      if [ "x$BRfsystem" = "xbtrfs" ] && [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
        echo -e "LABEL linux\n\tLINUX ../vmlinuz-$BRinitrd\n\tAPPEND root=$BRroot rootflags=subvol=$BRrootsubvolname ro quiet\n\tINITRD ../initramfs-$BRinitrd.img" >> /mnt/target/boot/syslinux/syslinux.cfg
      else
        echo -e "LABEL linux\n\tLINUX ../vmlinuz-$BRinitrd\n\tAPPEND root=$BRroot ro quiet\n\tINITRD ../initramfs-$BRinitrd.img" >> /mnt/target/boot/syslinux/syslinux.cfg
      fi
    fi
  fi
}

generate_locales () {
  if [ $BRdistro = Fedora ]; then
    chroot /mnt/target localedef -f UTF-8 -i en_US en_US.UTF-8 2>&1 && echo SUCCESS || echo WARNING
  else
    chroot /mnt/target  locale-gen   2>&1 && echo SUCCESS || echo WARNING
  fi
}

remount_delete_subvols() {
  echo -e "\n---------------RE-MOUNTING AND DELETING SUBVOLUMES ---------------"
  cd ~ 
  mount  $BRroot /mnt/target

  if [  "x$BRfsystem" = "xbtrfs" ] && [ "x$BRhomesubvol" = "xy" ] || [ "x$BRhomesubvol" = "xY" ]; then
    btrfs subvolume delete /mnt/target/$BRrootsubvolname/home
  fi
  
  if [  "x$BRfsystem" = "xbtrfs" ] && [ "x$BRvarsubvol" = "xy" ] || [ "x$BRvarsubvol" = "xY" ]; then
    btrfs subvolume delete /mnt/target/$BRrootsubvolname/var
  fi

  if [  "x$BRfsystem" = "xbtrfs" ] && [ "x$BRusrsubvol" = "xy" ] || [ "x$BRusrsubvol" = "xY" ]; then
    btrfs subvolume delete /mnt/target/$BRrootsubvolname/usr
  fi  

  if [  "x$BRfsystem" = "xbtrfs" ] && [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
    btrfs subvolume delete /mnt/target/$BRrootsubvolname
  fi
}  

unmount_only() {
  echo -e "\n---------------UNMOUNTING ---------------"
  cd ~ 
  if [ -n "$BRhome" ]; then
    umount  $BRhome
    if [ "$?" -ne "0" ]; then
      echo "Error unmounting volume"
    else
      if [ -z "$BRhomesubvol" ] || [ "x$BRhomesubvol" = "xn" ] || [ "x$BRhomesubvol" = "xN" ]; then
        rm -r /mnt/target/home
      fi
    fi
  fi
  if [ -n "$BRboot" ]; then
    umount  $BRboot
    if [ "$?" -ne "0" ]; then
      echo "Error unmounting volume"
    else
      rm -r /mnt/target/boot
    fi
  fi
  umount $BRroot 
    if [ "$?" -ne "0" ]; then
      echo "Error unmounting volume"
    else
      echo "SUCCESS"
    fi
}  

clean_unmount_in() {
  echo -e "\n---------------CLEANING AND UNMOUNTING-------------- "
  cd ~ 
  if [ -n "$BRhome" ]; then
    umount  $BRhome
    if [ "$?" -ne "0" ]; then
      echo "Error unmounting volume"
      else
      rm -r /mnt/target/home
    fi
  fi
  if [ -n "$BRboot" ]; then
    umount  $BRboot
    if [ "$?" -ne "0" ]; then
      echo "Error unmounting volume"
    else
      rm -r /mnt/target/boot
    fi
  fi
  
  if [ -f /mnt/target/fullbackup.tgz ]; then
    rm /mnt/target/fullbackup.tgz
  fi

  umount $BRroot 
  if [ "$?" -ne "0" ]; then
    echo "Error unmounting volume"
  else
    sleep 1
    rm  -r /mnt/target 2>&1 && echo SUCCESS  || echo FAILED 
  fi
  exit
}

clean_unmount_out() {
  echo -e "\n---------------CLEANING AND UNMOUNTING-------------- "
  cd ~ 
  rm /mnt/target/fullbackup.tgz
  umount /mnt/target/dev
  umount /mnt/target/proc
  umount /mnt/target/sys
  if [ -n "$BRhome" ]; then
    umount  $BRhome
  fi
  if [ -n "$BRboot" ]; then
    umount  $BRboot
  fi
  umount $BRroot 
  if [ "$?" -ne "0" ]; then
    echo "Error unmounting volume"
  else
    sleep 1
    rm  -r /mnt/target 2>&1 && echo SUCCESS  || echo FAILED 
  fi
  exit
}

create_subvols () {
  echo -e "\n---------------CREATING SUBVOLUMES---------------"
  btrfs subvolume create /mnt/target/$BRrootsubvolname
  if [ "x$BRhomesubvol" = "xy" ] || [ "x$BRhomesubvol" = "xY" ]; then
    btrfs subvolume create /mnt/target/$BRrootsubvolname/home 
  fi
 
  if [ "x$BRvarsubvol" = "xy" ] || [ "x$BRvarsubvol" = "xY" ]; then
    btrfs subvolume create /mnt/target/$BRrootsubvolname/var 
  fi

  if [ "x$BRusrsubvol" = "xy" ] || [ "x$BRusrsubvol" = "xY" ]; then
    btrfs subvolume create /mnt/target/$BRrootsubvolname/usr
  fi
  
  unmount_only
  
  echo -e "\n---------------MOUNTING SUBVOLUME $BRrootsubvolname---------------"
  mount -t btrfs -o compress=lzo,subvol=$BRrootsubvolname $BRroot /mnt/target 2>&1 && echo SUCCESS  || echo WARNING

  if [   -n "$BRhome" ]; then
    echo -e "\n---------------MOUNTING $BRhome (/home)---------------"
    if [ -z "$BRhomesubvol" ] || [ "x$BRhomesubvol" = "xn" ] || [ "x$BRhomesubvol" = "xN" ]; then
      mkdir /mnt/target/home
    fi
    mount $BRhome /mnt/target/home  2>&1 && echo SUCCESS  || echo WARNING
  fi

  if [   -n "$BRboot" ]; then
    echo -e "\n---------------MOUNTING $BRboot (/boot)---------------"
    mkdir /mnt/target/boot
    mount $BRboot /mnt/target/boot  2>&1 && echo SUCCESS  || echo WARNING
  fi
}

BRargs=`getopt -o "i:d:r:s:b:h:g:S:f:u:n:p:R:HVUy" -l "interface:,distro:,root:,swap:,boot:,home:,grub:,syslinux:,file:,url:,username:,password:,help,yes,rootsubvolname:,homesubvol,varsubvol,usrsubvol" -n "$1" -- "$@"`

if [ $? -ne 0 ];
then
  echo "See $0 --help"
  exit 
fi

eval set -- "$BRargs";

while true; do
  case "$1" in
    -i|--interface)
      BRinterface=$2
      shift 2
    ;;
    -d|--distro)
      BRdistro=$2
      shift 2
    ;;
    -r|--root) 
      BRroot=$2
      shift 2
    ;;
    -s|--swap) 
      BRswap=$2
      shift 2
    ;;
    -b|--boot) 
      BRboot=$2
      shift 2
    ;;
    -h|--home) 
      BRhome=$2
      shift 2
    ;;
    -g|--grub) 
      BRgrub=$2
      shift 2
    ;;
    -S|--syslinux)
      BRsyslinux=$2
      shift 2
    ;;
    -f|--file) 
      BRfile=$2
      shift 2
    ;;
    -u|--url) 
      BRurl=$2
      shift 2
    ;;
    -n|--username) 
      BRusername=$2
      shift 2
    ;;
    -p|--password) 
      BRpassword=$2
      shift 2
    ;;
    -y|--yes) 
      def="y"
      shift
    ;;
    -R|--rootsubvolname) 
      BRrootsubvol="y"
      BRrootsubvolname=$2
      shift 2
    ;;
    -H|--homesubvol) 
      BRhomesubvol="y"
      shift
    ;;
    -V|--varsubvol) 
      BRvarsubvol="y"
      shift
    ;;
    -U|--usrsubvol) 
      BRusrsubvol="y"
      shift
    ;;
    --help)
      echo "
-i,  --interface       interface to use
-d,  --distro          target distribution
-r,  --root            root partition
-s,  --swap            swap partition
-b,  --boot            boot partition
-h,  --home            home partition
-g,  --grub            disk for grub
-S,  --syslinux        disk for syslinux
-f,  --file            backup file path
-u,  --url             url
-n,  --username        username
-p,  --password        password
-y,  --yes             yes to all
-R,  --rootsubvolname  subvolume name for /     (btrfs only)
-H,  --homesubvol      make subvolume for /home (btrfs only)
-V,  --varsubvol       make subvolume for /var  (btrfs only)
-U,  --usrsubvol       make subvolume for /usr  (btrfs only)

--help  print this page
"
      exit
      shift
    ;;  
    --)
      shift
      break
    ;;
  esac
done



if [ -n "$BRroot" ]; then
  if [ -z "$BRswap" ]; then
    BRswap=-1
  fi
  
  if [ -z "$BRboot" ]; then
    BRboot=-1
  fi
  
  if [ -z "$BRhome" ]; then
    BRhome=-1
  fi

  if [ -z "$BRdistro" ]; then
    echo "You must specify your target distribution. Aborting"
    exit
  fi
  
  if [ -z "$BRgrub" ] && [ -z "$BRsyslinux" ]; then
    echo "You must choose a bootloader. Aborting"
    exit
  fi  
   
  if [ -z "$BRfile" ] && [ -z "$BRurl" ]; then
    echo "You must enter a file or a URL to get the backup. Aborting"
    exit
  fi
fi

if [ -n "$BRrootsubvol" ]; then
  if [ -z "$BRvarsubvol" ]; then
    BRvarsubvol=-1
  fi
  
  if [ -z "$BRusrsubvol" ]; then
    BRusrsubvol=-1
  fi
  
  if [ -z "$BRhomesubvol" ]; then
    BRhomesubvol=-1
  fi
fi

if [ $(id -u) -gt 0 ]; then
  echo "Please run the script as root. Exit"
  exit
fi

interfaces=(CLI Dialog)

while [ -z "$BRinterface" ]; do
  echo -e "\nSelect interface or enter Q to quit"
  select c in ${interfaces[@]}; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#interfaces[@]} ]; then
      BRinterface=$c
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done
done

if [ $BRinterface = "CLI" ]; then

IFS=$'\n'
PS3="Choice: "

echo "`date +%A-%d-%m-%Y-%R`"

echo -e "\n---------------READING INPUT VARIABLES---------------"

list=(`for f in /dev/[hs]d[a-z][0-9]; do echo -e "$f $(lsblk -d -n -o size $f)\r"; done`)
distrolist=(Arch Debian Fedora)
editorlist=(nano vi)

while [ -z "$BRdistro" ]; do
  echo -e "\nSelect target distribution or enter Q to quit"
  select c in ${distrolist[@]}; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#distrolist[@]} ]; then
      BRdistro=$c
      echo "You selected $BRdistro" 
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done  
done

while [ -z "$BRroot" ]; do
  echo -e "\nSelect the number of your root partition or enter Q to quit"
  select c in ${list[@]}; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
      BRroot=(`echo $c | awk '{ print $1 }'`)
      echo "You selected $BRroot as your root partition" 
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done  
done

if [ -z "$BRswap" ]; then
  echo -e "\n(Optional - Press C to skip) Select the number of your swap partition (for fstab) or enter Q to quit"
  select c in ${list[@]}; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
      BRswap=(`echo $c | awk '{ print $1 }'`)
      echo "You selected $BRswap as your swap partition" 
      break
    elif [ $REPLY = "c" ] || [ $REPLY = "C" ]; then
      echo "No swap"
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done
fi

if [ -z "$BRhome" ]; then
  echo -e "\n(Optional - Press C to skip) Select the number of your home partition (for fstab) or enter Q to quit"
  select c in ${list[@]}; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
      BRhome=(`echo $c | awk '{ print $1 }'`)
      echo "You selected $BRhome as your home partition" 
      break
    elif [ $REPLY = "c" ] || [ $REPLY = "C" ]; then
      echo "No separate home"
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done
fi

if [ -z "$BRboot" ]; then
  echo -e "\n(Optional - Press C to skip) Select the number of your boot partition (for fstab) or enter Q to quit"
  select c in ${list[@]}; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
      BRboot=(`echo $c | awk '{ print $1 }'`)
      echo "You selected $BRboot as your boot partition" 
      break
    elif [ $REPLY = "c" ] || [ $REPLY = "C" ]; then
      echo "No separate boot"
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done
fi

if [ -z $BRgrub ] && [ -z $BRsyslinux ]; then

  echo -e "\nSelect the number of your bootloader or enter Q to quit"
  select c in Grub Syslinux; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
	echo "Now quiting"
	exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -eq 1 ]; then

      while [ -z "$BRgrub" ]; do

	echo -e "\nWhere to install GRUB? Enter Q to quit"
	select c in /dev/[hs]d[a-z]; do
	  if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
	    echo "Now quiting"
	    exit
	  elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
	    BRgrub=(`echo $c | awk '{ print $1 }'`)
	    echo "You selected $BRgrub to install GRUB"  
	    break
	  else
	    echo "Please select a valid option from the list or enter Q to quit"
	  fi
	done
      done
      break

    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -eq 2 ]; then
      while [ -z "$BRsyslinux" ]; do

	echo -e "\nWhere to install Syslinux? Enter Q to quit"
	select c in /dev/[hs]d[a-z]; do
	  if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
	    echo "Now quiting"
	    exit
	  elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
	    BRsyslinux=(`echo $c | awk '{ print $1 }'`)
	    echo "You selected $BRsyslinux to install Syslinux"  
	    break
	  else
	    echo "Please select a valid option from the list or enter Q to quit"
	  fi
	done
      done
      break
    else
    echo "Please select a valid option from the list or enter Q to quit"
    fi
  done
fi 
 

if [ "x$BRswap" = "x-1" ]; then
	unset BRswap
fi
if [ "x$BRboot" = "x-1" ]; then
	unset BRboot
fi
if [ "x$BRhome" = "x-1" ]; then
	unset BRhome
fi

mount_all

BRfsystem=(`df -T | grep $BRroot | awk '{ print $2}'`)

if [ -n "$BRhome" ]; then
  BRhomefsystem=(`df -T | grep $BRhome | awk '{ print $2}'`)
fi

if [ -n "$BRboot" ]; then
  BRbootfsystem=(`df -T | grep $BRboot | awk '{ print $2}'`)
fi

if [  "x$BRfsystem" = "xbtrfs" ]; then
  while [ -z "$BRrootsubvol" ]; do
    echo " "
    read -p "BTRFS root file system detected. Do you want to create a subvolume for root (/) ? (Y/n): " an

    if [ -n "$an" ]; then
      btrfsdef=$an
    else
      btrfsdef="y"
    fi
  
    if [ $btrfsdef = "y" ] || [ $btrfsdef = "Y" ]; then
      BRrootsubvol="y"
    elif [ $btrfsdef = "n" ] || [ $btrfsdef = "N" ]; then
      BRrootsubvol="n"
    else
      echo -e "Please enter a valid option\n"
    fi
  done 

  if [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then

    while [ -z "$BRrootsubvolname" ]; do   
      read -p "Enter subvolume name: " BRrootsubvolname
      echo "Subvolume name: $BRrootsubvolname"
      if [ -z "$BRrootsubvolname" ]; then
        echo "Please enter a name for the subvolume."
      fi
    done
 
    while [ -z "$BRhomesubvol" ]; do
      echo " "
      read -p "Create subvolume for /home inside $BRrootsubvolname ? (Y/n): " an

      if [ -n "$an" ]; then
        btrfsdef=$an
      else
        btrfsdef="y"
      fi
  
      if [ $btrfsdef = "y" ] || [ $btrfsdef = "Y" ]; then
        BRhomesubvol="y"
      elif [ $btrfsdef = "n" ] || [ $btrfsdef = "N" ]; then
        BRhomesubvol="n"
      else
        echo -e "Please enter a valid option\n"
      fi
    done 

    while [ -z "$BRvarsubvol" ]; do
      echo " "
      read -p "Create subvolume for /var inside $BRrootsubvolname ? (Y/n): " an

      if [ -n "$an" ]; then
        btrfsdef=$an
      else
        btrfsdef="y"
      fi
  
      if [ $btrfsdef = "y" ] || [ $btrfsdef = "Y" ]; then
        BRvarsubvol="y"
      elif [ $btrfsdef = "n" ] || [ $btrfsdef = "N" ]; then
        BRvarsubvol="n"
      else
        echo -e "Please enter a valid option\n"
      fi
    done

    while [ -z "$BRusrsubvol" ]; do
      echo " "
      read -p "Create subvolume for /usr inside $BRrootsubvolname ? (Y/n): " an

      if [ -n "$an" ]; then
        btrfsdef=$an
      else
        btrfsdef="y"
      fi
  
      if [ $btrfsdef = "y" ] || [ $btrfsdef = "Y" ]; then
        BRusrsubvol="y"
      elif [ $btrfsdef = "n" ] || [ $btrfsdef = "N" ]; then
        BRusrsubvol="n"
      else
        echo -e "Please enter a valid option\n"
      fi
    done 

    if [ "x$BRhomesubvol" = "x-1" ]; then
	unset BRhomesubvol
    fi
    if [ "x$BRusrsubvol" = "x-1" ]; then
	unset BRusrsubvol
    fi
    if [ "x$BRhome" = "x-1" ]; then
	unset BRvarsubvol
    fi
    create_subvols
    fi
elif [  "x$BRrootsubvol" = "xy" ] || [ "x$BRhomesubvol" = "xy" ] || [ "x$BRvarsubvol" = "xy" ] || [ "x$BRusrsubvol" = "xy" ]; then
  echo "Not a btrfs root filesystem, proceeding without subvolumes..."
  sleep 1
fi

echo -e "\n---------------GETTING TAR IMAGE---------------"

if [ -n "$BRfile" ]; then
  echo "Copying file..."
  cp $BRfile "/mnt/target/fullbackup.tgz"
fi

if [ -n "$BRurl" ]; then
  if [ -n "$BRusername" ]; then
    wget --user=$BRusername --password=$BRpassword -O /mnt/target/fullbackup.tgz $BRurl --tries=2
    if [ "$?" -ne "0" ]; then
    echo "Error downloading file"
    rm /mnt/target/fullbackup.tgz
    fi
  else
    wget -O /mnt/target/fullbackup.tgz $BRurl --tries=2
    if [ "$?" -ne "0" ]; then
      echo "Error downloading file"
      rm /mnt/target/fullbackup.tgz
    fi
  fi
fi


while [ ! -f /mnt/target/fullbackup.tgz ]; do
    
  echo -e "\nSelect an option or enter Q to quit"
  select c in "File" "URL" "Protected URL"; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
        if [  "x$BRfsystem" = "xbtrfs" ] && [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
        unmount_only
        unset BRhome
        unset BRboot
        remount_delete_subvols
        fi
      clean_unmount_in
    elif [ $REPLY = "1" ]; then
      while [ ! -f /mnt/target/fullbackup.tgz ]; do
	read -p "Enter the path of the backup file: " BRfile
	if [ ! -f $BRfile ] || [ -z $BRfile ]; then
	  echo "File not found"
	else
	   echo "Copying file..."
           cp $BRfile "/mnt/target/fullbackup.tgz"
       	fi
      done
      break
      
    elif [ $REPLY = "2" ] || [ $REPLY = "3" ]; then
      read -p "Enter the URL for the backup file: " BRurl
      echo " "
      if [ $REPLY = "3" ]; then
	read -p "Enter the username: " BRusername
	read -sp "Enter the password: " BRpassword
	echo " "
	wget --user=$BRusername --password=$BRpassword  -O /mnt/target/fullbackup.tgz $BRurl --tries=2
        if [ "$?" -ne "0" ]; then
	  echo "Error downloading file"
	  rm /mnt/target/fullbackup.tgz
        fi
	break
      fi
      wget -O /mnt/target/fullbackup.tgz $BRurl --tries=2
      if [ "$?" -ne "0" ]; then
	echo "Error downloading file"
	rm /mnt/target/fullbackup.tgz 
      fi
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done
done

echo " "
echo SUMMARY
show_summary
echo " "

if [ -z $def ]; then
  read -p "Do you want continue? (Y/n): " def
fi

if [ "x$def" = "xn" ] || [ "x$def" = "xN" ]; then
   if [  "x$BRfsystem" = "xbtrfs" ] && [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
   unmount_only
   unset BRhome
   unset BRboot
   remount_delete_subvols 
   fi
 clean_unmount_in
fi  



echo -e "\n---------------EXTRACTING---------------"
tar xvpfz /mnt/target/fullbackup.tgz -C /mnt/target   2>&1 && echo SUCCESS  || echo WARNING  
sleep 1

echo -e "\n---------------MOUNTING /dev /proc /sys---------------"
mount_dev_proc_sys
sleep 1 

echo -e "\n---------------GENERATING FSTAB---------------"
generate_fstab
cat /mnt/target/etc/fstab
sleep 1

while [ -z "$BRedit" ] ; do
echo " "
read -p "Do you want to edit fstab ?  (Y/n): " an

  if [ -n "$an" ]; then
    def=$an
  else
    def="y"
  fi
  
  if [ $def = "y" ] || [ $def = "Y" ]; then
    BRedit="y"
  elif [ $def = "n" ] || [ $def = "N" ]; then
    BRedit="n"
  else
    echo -e "Please enter a valid option\n"
  fi
done

if [ $BRedit = "y" ]; then

while [ -z "$BReditor" ]; do
  echo -e "\nSelect editor"
  select c in ${editorlist[@]}; do
       if [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#editorlist[@]} ]; then
      BReditor=$c
      $BReditor /mnt/target/etc/fstab
     break
    else
      echo "Please select an editor"
    fi
  done  
done
fi

echo -e "\n---------------REBUILDING INITRAMFS IMAGE---------------"
build_initramfs
sleep 1

install_bootloader
sleep 1

echo -e "\n---------------GENERATING LOCALES---------------"
generate_locales
sleep 1

echo -e "\nCompleted. Press ENTER to unmount and clean, then reboot your system." 
read -s a

sleep 2
clean_unmount_out

elif [ $BRinterface = "Dialog" ]; then

if [ -z $(which dialog 2> /dev/null) ];then
 echo "Package dialog is not installed. Install the package and re-run the script."
 exit
fi

exec 3>&1

while [ -z "$BRdistro" ]; do
  BRdistro=$(dialog --cancel-label Quit --menu "Select target distribution." 12 35 12   Arch Linux  Debian Linux  Fedora Linux 2>&1 1>&3)  
  if [ $? = "1" ]; then
    BRdistro=" "
    exit
  fi 
done

while [ -z "$BRroot" ]; do
  BRroot=$(dialog --cancel-label Quit --menu "Select root partition." 14 40 14 `for f in /dev/[hs]d[a-z][0-9]; do echo -e "$f $(lsblk -d -n -o size $f)\r"; done` 2>&1 1>&3)
  if [ $? = "1" ]; then
    BRroot=" "
    exit
  fi 
done

if [ -z "$BRswap" ]; then
  BRswap=$(dialog --cancel-label Skip --extra-button --extra-label Quit --menu "Select swap partition." 14 40 14 `for f in /dev/[hs]d[a-z][0-9]; do echo -e "$f $(lsblk -d -n -o size $f)\r"; done` 2>&1 1>&3)
  if [ $? = "3" ]; then
    BRswap=" "
    exit
  fi 
fi

if [ -z "$BRhome" ]; then
  BRhome=$(dialog --cancel-label Skip --extra-button --extra-label Quit --menu "Select home partition." 14 40 14 `for f in /dev/[hs]d[a-z][0-9]; do echo -e "$f $(lsblk -d -n -o size $f)\r"; done` 2>&1 1>&3)
  if [ $? = "3" ]; then
    BRhome=" "
    exit
  fi 
fi

if [ -z "$BRboot" ]; then
  BRboot=$(dialog --cancel-label Skip --extra-button --extra-label Quit --menu "Select boot partition." 14 40 14 `for f in /dev/[hs]d[a-z][0-9]; do echo -e "$f $(lsblk -d -n -o size $f)\r"; done` 2>&1 1>&3)
  if [ $? = "3" ]; then
    BRboot=" "
    exit
  fi 
fi


if [ -z $BRgrub ] && [ -z $BRsyslinux ]; then
  REPLY=$(dialog  --cancel-label Quit  --menu "Select bootloader." 12 35 12  Grub Bootloader Syslinux Bootloader 2>&1 1>&3)
    if [ $? = "1" ]; then
      exit
    fi 
  if [ $REPLY = "Grub" ]; then
     while [ -z "$BRgrub" ]; do
       BRgrub=$(dialog --cancel-label Quit  --menu "Select disk for Grub. " 12 40 12 `for f in /dev/[hs]d[a-z]; do echo -e "$f $(lsblk -d -n -o size $f)\r"; done` 2>&1 1>&3)
       if [ $? = "1" ]; then
       BRgrub=" "
        exit
       fi 
     done
  elif [ $REPLY = "Syslinux" ]; then
     while [ -z "$BRsyslinux" ]; do
       BRsyslinux=$(dialog --cancel-label Quit  --menu "Select disk for Syslinux." 12 40 12 `for f in /dev/[hs]d[a-z]; do echo -e "$f $(lsblk -d -n -o size $f)\r"; done` 2>&1 1>&3)
       if [ $? = "1" ]; then
       BRsyslinux=" "
        exit
       fi 
     done
  fi
fi 
 

if [ "x$BRswap" = "x-1" ]; then
	unset BRswap
fi
if [ "x$BRboot" = "x-1" ]; then
	unset BRboot
fi
if [ "x$BRhome" = "x-1" ]; then
	unset BRhome
fi

mount_all | dialog --progressbox "Working..." 30 70

BRfsystem=(`df -T | grep $BRroot | awk '{ print $2}'`)

if [   -n "$BRhome" ]; then
  BRhomefsystem=(`df -T | grep $BRhome | awk '{ print $2}'`)
fi

if [   -n "$BRboot" ]; then
  BRbootfsystem=(`df -T | grep $BRboot | awk '{ print $2}'`)
fi

sleep 2

if [  "x$BRfsystem" = "xbtrfs" ]; then
  while [ -z "$BRrootsubvol" ]; do
    dialog --title "Message"  --yesno "BTRFS root file system detected. Do you want to create a subvolume for root (/) ?" 8 50

    if [ "$?" = "0" ]; then
      btrfsdef="y"
    elif [ "$?" = "1" ]; then
      btrfsdef="n"
    fi
  
    if [ $btrfsdef = "y" ] || [ $btrfsdef = "Y" ]; then
      BRrootsubvol="y"
    elif [ $btrfsdef = "n" ] || [ $btrfsdef = "N" ]; then
      BRrootsubvol="n"
    fi
  done 

  if [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then

    while [ -z "$BRrootsubvolname" ]; do   
      BRrootsubvolname=$(dialog  --no-cancel --inputbox "Enter subvolume name" 8 50 2>&1 1>&3)
      if [ -z "$BRrootsubvolname" ]; then
        echo "Please enter a name for the subvolume." | dialog --progressbox "ERROR" 30 70
        sleep 2
      fi
    done
 
    while [ -z "$BRhomesubvol" ]; do
      dialog --title "Message"  --yesno "Create subvolume for /home inside $BRrootsubvolname ?" 8 50

      if [ "$?" = "0" ]; then
        btrfsdef="y"
      elif [ "$?" = "1" ]; then
        btrfsdef="n"
      fi
  
      if [ $btrfsdef = "y" ] || [ $btrfsdef = "Y" ]; then
        BRhomesubvol="y"
      elif [ $btrfsdef = "n" ] || [ $btrfsdef = "N" ]; then
        BRhomesubvol="n"
      fi
    done 

    while [ -z "$BRvarsubvol" ]; do
      dialog --title "Message"  --yesno "Create subvolume for /var inside $BRrootsubvolname ?" 8 50

      if [ "$?" = "0" ]; then
        btrfsdef="y"
      elif [ "$?" = "1" ]; then
        btrfsdef="n"
      fi
  
      if [ $btrfsdef = "y" ] || [ $btrfsdef = "Y" ]; then
        BRvarsubvol="y"
      elif [ $btrfsdef = "n" ] || [ $btrfsdef = "N" ]; then
        BRvarsubvol="n"
      fi
    done

    while [ -z "$BRusrsubvol" ]; do
      dialog --title "Message"  --yesno "Create subvolume for /usr inside $BRrootsubvolname ?" 8 50

      if [ "$?" = "0" ]; then
        btrfsdef="y"
      elif [ "$?" = "1" ]; then
        btrfsdef="n"
      fi
  
      if [ $btrfsdef = "y" ] || [ $btrfsdef = "Y" ]; then
        BRusrsubvol="y"
      elif [ $btrfsdef = "n" ] || [ $btrfsdef = "N" ]; then
        BRusrsubvol="n"
      fi
    done 

    if [ "x$BRhomesubvol" = "x-1" ]; then
	unset BRhomesubvol
    fi
    if [ "x$BRusrsubvol" = "x-1" ]; then
	unset BRusrsubvol
    fi
    if [ "x$BRhome" = "x-1" ]; then
	unset BRvarsubvol
    fi
    create_subvols 2>&1 | dialog --progressbox "Working..." 30 70
    sleep 2
  fi
elif [  "x$BRrootsubvol" = "xy" ] || [ "x$BRhomesubvol" = "xy" ] || [ "x$BRvarsubvol" = "xy" ] || [ "x$BRusrsubvol" = "xy" ]; then
  echo "Not a btrfs root filesystem, proceeding without subvolumes..." | dialog --progressbox "ERROR" 30 70
  sleep 3
fi

echo -e "\n---------------GETTING TAR IMAGE---------------"

if [ -n "$BRfile" ]; then
  if [ ! -f $BRfile ] || [ -z $BRfile ]; then
    echo "File not found." | dialog --progressbox "ERROR" 30 70
    sleep 2
  else
(   echo "Copying file please wait..." 
    cp "${BRfile[@]}" "/mnt/target/fullbackup.tgz" ) | dialog --progressbox "Working..." 30 70
  fi
fi

if [ -n "$BRurl" ]; then
  if [ -n "$BRusername" ]; then
 (  wget --user=$BRusername --password=$BRpassword -O /mnt/target/fullbackup.tgz $BRurl --tries=2 2>&1
    if [ "$?" -ne "0" ]; then
      echo ERROR
      sleep 2
      rm /mnt/target/fullbackup.tgz
    fi ) | dialog --progressbox "Downloading file..." 30 70
  else
  ( wget -O /mnt/target/fullbackup.tgz $BRurl --tries=2 2>&1
    if [ "$?" -ne "0" ]; then
      echo ERROR
      sleep 2
      rm /mnt/target/fullbackup.tgz
    fi ) | dialog --progressbox "Downloading file..." 30 70
  fi
fi

while [ ! -f /mnt/target/fullbackup.tgz ]; do

REPLY=$(dialog  --cancel-label Quit --menu "Select backup file. Choose an option." 13 50 13  File "local file" URL "remote file" Protected "protected server" 2>&1 1>&3)

if [ $? = "1" ]; then
    if [  "x$BRfsystem" = "xbtrfs" ] && [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
      unmount_only
      unset BRhome
      unset BRboot
      remount_delete_subvols
     fi
     clean_unmount_in
elif [ $REPLY = "File" ]; then
  BRfile=$(dialog  --no-cancel --inputbox "Enter the path of the backup file" 8 50 2>&1 1>&3)
  if [ ! -f $BRfile ] || [ -z $BRfile ]; then
    echo "File not found" | dialog --progressbox "ERROR" 30 70
    sleep 2
  else
(   echo "Copying file please wait..."
    cp "${BRfile[@]}" "/mnt/target/fullbackup.tgz" ) | dialog --progressbox "Working..." 30 70
  fi
  
elif [ $REPLY = "URL" ] || [ $REPLY = "Protected" ]; then
  BRurl=$(dialog  --no-cancel --inputbox "Enter the URL for the backup file" 8 50 2>&1 1>&3)
  if [  $REPLY = "Protected" ]; then
    BRusername=$(dialog --no-cancel --inputbox "Enter the username" 8 50 2>&1 1>&3)
    BRpassword=$(dialog --no-cancel --inputbox "Enter the password" 8 50 2>&1 1>&3)
 (  wget --user=$BRusername --password=$BRpassword  -O /mnt/target/fullbackup.tgz $BRurl --tries=2 2>&1
      if [ "$?" -ne "0" ]; then
        echo  ERROR
	sleep 2
        rm /mnt/target/fullbackup.tgz
      fi ) | dialog --progressbox "Downloading file..." 30 70

  elif [ $REPLY = "URL" ]; then
  ( wget -O /mnt/target/fullbackup.tgz $BRurl --tries=2 2>&1
     if [ "$?" -ne "0" ]; then
       echo  ERROR
       sleep 2
       rm /mnt/target/fullbackup.tgz 
     fi ) | dialog --progressbox "Downloading file..." 30 70
  fi 
fi

done

if [ -z $def ]; then

dialog --title "Summary"  --yesno "
`show_summary`
------------------------------------------
Press Yes to continue, or No to abort." 19 60

 if [ $? = "0" ]; then
   def="y"
 elif [ $? = "1" ]; then
   def="n"
 fi
fi

if [ "x$def" = "xn" ] || [ "x$def" = "xN" ]; then
   if [  "x$BRfsystem" = "xbtrfs" ] && [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
   unmount_only
   unset BRhome
   unset BRboot
   remount_delete_subvols 
   fi
 clean_unmount_in
fi  

( tar xvpfz /mnt/target/fullbackup.tgz -C /mnt/target   2>&1 && echo SUCCESS  || echo WARNING ) | dialog --progressbox "EXTRACTING" 30 70
sleep 2

mount_dev_proc_sys 2>&1 | dialog --progressbox "MOUNTING /dev /proc /sys" 30 70
sleep 2

generate_fstab
dialog --yesno   "
GENERATING FSTAB
`cat /mnt/target/etc/fstab`
__________________________________________________________________

Edit fstab ?"  30 70

if [ $? = "0" ]; then
 while [ -z "$BRdeditor" ]; do
   BRdeditor=$(dialog --no-cancel  --menu "Select editor." 12 35 12   nano editor vi editor 2>&1 1>&3)  
   $BRdeditor /mnt/target/etc/fstab
 done
fi

build_initramfs 2>&1 | dialog --progressbox "REBUILDING INITRAMFS IMAGE" 30 70
sleep 2

install_bootloader 2>&1 | dialog --progressbox "INSTALLING AND CONFIGURING BOOTLOADER" 30 70
sleep 2

generate_locales 2>&1 | dialog --progressbox "GENERATING LOCALES" 30 70
sleep 2

dialog --title "Info" --msgbox  "Completed. Press OK to unmount and clean, then reboot your system." 8 50

sleep 2
clean_unmount_out

else
  echo "Wrong interface name. Use CLI or Dialog. Exit"
fi
