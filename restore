#!/bin/bash

clear

if [ $(id -u) -gt 0 ]; then
  echo "Please run the script as root. Exit"
  exit
fi


remountdeletesubvolumes() {
 cd ~ 
umount $BRroot 
sleep 1
mount  $BRroot /mnt/target
 if [ "x$BRhomesubvol" = "xy" ] || [ "x$BRhomesubvol" = "xY" ]; then
   btrfs subvolume delete /mnt/target/$BRrootsubvolname/home
 fi
  
 if [ "x$BRvarsubvol" = "xy" ] || [ "x$BRvarsubvol" = "xY" ]; then
   btrfs subvolume delete /mnt/target/$BRrootsubvolname/var
 fi

 if [ "x$BRusrsubvol" = "xy" ] || [ "x$BRusrsubvol" = "xY" ]; then
   btrfs subvolume delete /mnt/target/$BRrootsubvolname/usr
 fi  

 if [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
   btrfs subvolume delete /mnt/target/$BRrootsubvolname
 fi  
}  

unmount() {
  cd ~ 
  if [ -n "$BRhome" ]; then
    umount  $BRhome
    if [ "$?" -ne "0" ]; then
      echo "Error unmounting volume"
      else
      rm -r /mnt/target/home
    fi
  fi
  if [ -n "$BRboot" ]; then
    umount  $BRboot
    if [ "$?" -ne "0" ]; then
      echo "Error unmounting volume"
      else
      rm -r /mnt/target/boot
    fi
  fi
umount $BRroot 
   if [ "$?" -ne "0" ]; then
     echo "Error unmounting volume"
     else
    echo "SUCCESS"
   fi
}  

cleanandunmount() {
  echo -e "\n---------------CLEANING AND UNMOUNTING-------------- "
  cd ~ 
  if [ -n "$BRhome" ]; then
    umount  $BRhome
    if [ "$?" -ne "0" ]; then
      echo "Error unmounting volume"
      else
      rm -r /mnt/target/home
    fi
  fi
  if [ -n "$BRboot" ]; then
    umount  $BRboot
    if [ "$?" -ne "0" ]; then
      echo "Error unmounting volume"
      else
      rm -r /mnt/target/boot
    fi
  fi
  
  if [ -f /mnt/target/fullbackup.tgz ]; then
    rm /mnt/target/fullbackup.tgz
  fi

  umount $BRroot 
   if [ "$?" -ne "0" ]; then
     echo "Error unmounting volume"
     else
     sleep 1
     rm  -r /mnt/target 2>&1 && echo SUCCESS  || echo FAILED 
   fi
  exit
}


while getopts "d:r:s:b:h:g:l:f:u:n:p:y" arg; do
  case $arg in
    d)
      BRdistro=$OPTARG
    ;;
    r) 
      BRroot=$OPTARG
    ;;
    s) 
      BRswap=$OPTARG
    ;;
    b) 
      BRboot=$OPTARG
    ;;
    h) 
      BRhome=$OPTARG
    ;;
    g) 
      BRgrub=$OPTARG
    ;;
    l)
      BRsyslinux=$OPTARG
    ;;
    f) 
      BRfile=$OPTARG
    ;;
    u) 
      BRurl=$OPTARG
    ;;
    n) 
      BRusername=$OPTARG
    ;;
    p) 
      BRpassword=$OPTARG
    ;;
    y) 
      def="y"
    ;;
    \?)
      echo "Usage: $0 
-d  [target distribution] 
-r  [root partition] 
-s  [swap partition] 
-b  [boot partition] 
-h  [home partition]
-g  [disk for grub] 
-l  [disk for syslinux] 
-f  [backup file path]
-u  [url] 
-n  [username]
-p  [password]
-y  (yes to all)"
      exit
    ;;
  esac
done

if [ -n "$BRroot" ]; then
  if [ -z "$BRswap" ]; then
    BRswap=-1
  fi
  
  if [ -z "$BRboot" ]; then
    BRboot=-1
  fi
  
  if [ -z "$BRhome" ]; then
    BRhome=-1
  fi

  if [ -z "$BRdistro" ]; then
    echo "You must specify your target distribution. Aborting"
    exit
  fi
  
  if [ -z "$BRgrub" ] && [ -z "$BRsyslinux" ]; then
    echo "You must choose a bootloader. Aborting"
    exit
  fi  
   
  if [ -z "$BRfile" ] && [ -z "$BRurl" ]; then
    echo "You must enter a file or a URL to get the backup. Aborting"
    exit
  fi
fi

IFS=$'\n'
PS3="Choice: "

echo "`date +%A-%d-%m-%Y-%R`"

echo -e "\n---------------READING INPUT VARIABLES---------------"

list=(`for f in /dev/[hs]d[a-z][0-9]; do echo -e "$f $(lsblk -d -n -o size $f)\r"; done`)
distrolist=(Arch Debian Fedora)

while [ -z "$BRdistro" ]; do
  echo -e "\nSelect target distribution or enter Q to quit"
  select c in ${distrolist[@]}; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#distrolist[@]} ]; then
      BRdistro=$c
      echo "You selected $BRdistro" 
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done  
done

while [ -z "$BRroot" ]; do
  echo -e "\nSelect the number of your root partition or enter Q to quit"
  select c in ${list[@]}; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
      BRroot=(`echo $c | awk '{ print $1 }'`)
      echo "You selected $BRroot as your root partition" 
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done  
done

if [ -z "$BRswap" ]; then
  echo -e "\n(Optional - Press C to skip) Select the number of your swap partition (for fstab) or enter Q to quit"
  select c in ${list[@]}; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
      BRswap=(`echo $c | awk '{ print $1 }'`)
      echo "You selected $BRswap as your swap partition" 
      break
    elif [ $REPLY = "c" ] || [ $REPLY = "C" ]; then
      echo "No swap"
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done
fi

if [ -z "$BRhome" ]; then
  echo -e "\n(Optional - Press C to skip) Select the number of your home partition (for fstab) or enter Q to quit"
  select c in ${list[@]}; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
      BRhome=(`echo $c | awk '{ print $1 }'`)
      echo "You selected $BRhome as your home partition" 
      break
    elif [ $REPLY = "c" ] || [ $REPLY = "C" ]; then
      echo "No separate home"
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done
fi

if [ -z "$BRboot" ]; then
  echo -e "\n(Optional - Press C to skip) Select the number of your boot partition (for fstab) or enter Q to quit"
  select c in ${list[@]}; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
      BRboot=(`echo $c | awk '{ print $1 }'`)
      echo "You selected $BRboot as your boot partition" 
      break
    elif [ $REPLY = "c" ] || [ $REPLY = "C" ]; then
      echo "No separate boot"
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done
fi

if [ -z $BRgrub ] && [ -z $BRsyslinux ]; then

  echo -e "\nSelect the number of your bootloader or enter Q to quit"
  select c in Grub Syslinux; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
	echo "Now quiting"
	exit
    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -eq 1 ]; then

      while [ -z "$BRgrub" ]; do

	echo -e "\nWhere to install GRUB? Enter Q to quit"
	select c in /dev/[hs]d[a-z]; do
	  if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
	    echo "Now quiting"
	    exit
	  elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
	    BRgrub=(`echo $c | awk '{ print $1 }'`)
	    echo "You selected $BRgrub to install GRUB"  
	    break
	  else
	    echo "Please select a valid option from the list or enter Q to quit"
	  fi
	done
      done
      break

    elif [[ $REPLY = [0-9]* ]] && [ $REPLY -eq 2 ]; then
      while [ -z "$BRsyslinux" ]; do

	echo -e "\nWhere to install Syslinux? Enter Q to quit"
	select c in /dev/[hs]d[a-z]; do
	  if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
	    echo "Now quiting"
	    exit
	  elif [[ $REPLY = [0-9]* ]] && [ $REPLY -gt 0 ] && [ $REPLY -le ${#list[@]} ]; then
	    BRsyslinux=(`echo $c | awk '{ print $1 }'`)
	    echo "You selected $BRsyslinux to install Syslinux"  
	    break
	  else
	    echo "Please select a valid option from the list or enter Q to quit"
	  fi
	done
      done
      break
    else
    echo "Please select a valid option from the list or enter Q to quit"
    fi
  done
fi 
 

if [ "x$BRswap" = "x-1" ]; then
	unset BRswap
fi
if [ "x$BRboot" = "x-1" ]; then
	unset BRboot
fi
if [ "x$BRhome" = "x-1" ]; then
	unset BRhome
fi

echo -e "\n---------------MAKING WORKING DIRECTORY---------------"

mkdir /mnt/target  2>&1 && echo SUCCESS  || echo WARNING
sleep 1

echo -e "\n---------------MOUNTING $BRroot (/)---------------"

mount $BRroot /mnt/target  2>&1 && echo SUCCESS  || echo WARNING
BRfsystem=(`df -T | grep $BRroot | awk '{ print $2}'`)

if [   -n "$BRhome" ]; then
  echo -e "\n---------------MOUNTING $BRhome (/home)---------------"
  mkdir /mnt/target/home
  mount $BRhome /mnt/target/home  2>&1 && echo SUCCESS  || echo WARNING
  BRhomefsystem=(`df -T | grep $BRhome | awk '{ print $2}'`)
fi

if [   -n "$BRboot" ]; then
  echo -e "\n---------------MOUNTING $BRboot (/boot)---------------"
  mkdir /mnt/target/boot
  mount $BRboot /mnt/target/boot  2>&1 && echo SUCCESS  || echo WARNING
  BRbootfsystem=(`df -T | grep $BRboot | awk '{ print $2}'`)
fi

if [  "x$BRfsystem" = "xbtrfs" ]; then
  while [ -z "$BRrootsubvol" ]; do
  
  echo " "
  read -p "BTRFS root file system detected. Do you want to use a subvolume for root (/) ? (Y/n): " an

  if [ -n "$an" ]; then
    def=$an
  else
    def="y"
  fi
  
  if [ $def = "y" ] || [ $def = "Y" ]; then
    BRrootsubvol="y"
  elif [ $def = "n" ] || [ $def = "N" ]; then
    BRrootsubvol="n"
  else
    echo -e "Please enter a valid option\n"
  fi
done 
fi


if [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then

  read -p "Enter subvolume name: " BRrootsubvolname
  echo "Subvolume name: $BRrootsubvolname"
 
 while [ -z "$BRhomesubvol" ]; do
  echo " "
  read -p "Create seperate subvolume for /home inside $BRrootsubvolname ? (Y/n): " an

  if [ -n "$an" ]; then
    def=$an
  else
    def="y"
  fi
  
  if [ $def = "y" ] || [ $def = "Y" ]; then
    BRhomesubvol="y"
  elif [ $def = "n" ] || [ $def = "N" ]; then
    BRhomesubvol="n"
  else
    echo -e "Please enter a valid option\n"
  fi
done 

while [ -z "$BRvarsubvol" ]; do
  echo " "
  read -p "Create seperate subvolume for /var inside $BRrootsubvolname ? (Y/n): " an

  if [ -n "$an" ]; then
    def=$an
  else
    def="y"
  fi
  
  if [ $def = "y" ] || [ $def = "Y" ]; then
    BRvarsubvol="y"
  elif [ $def = "n" ] || [ $def = "N" ]; then
    BRvarsubvol="n"
  else
    echo -e "Please enter a valid option\n"
  fi
done

while [ -z "$BRusrsubvol" ]; do
  echo " "
  read -p "Create seperate subvolume for /usr inside $BRrootsubvolname ? (Y/n): " an

  if [ -n "$an" ]; then
    def=$an
  else
    def="y"
  fi
  
  if [ $def = "y" ] || [ $def = "Y" ]; then
    BRusrsubvol="y"
  elif [ $def = "n" ] || [ $def = "N" ]; then
    BRusrsubvol="n"
  else
    echo -e "Please enter a valid option\n"
  fi
done 
fi

if [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
  echo -e "\n---------------CREATING SUBVOLUMES---------------"
  btrfs subvolume create /mnt/target/$BRrootsubvolname
      if [ "x$BRhomesubvol" = "xy" ] || [ "x$BRhomesubvol" = "xY" ]; then
         btrfs subvolume create /mnt/target/$BRrootsubvolname/home 
      fi
 
      if [ "x$BRvarsubvol" = "xy" ] || [ "x$BRvarsubvol" = "xY" ]; then
         btrfs subvolume create /mnt/target/$BRrootsubvolname/var 
      fi

      if [ "x$BRusrsubvol" = "xy" ] || [ "x$BRusrsubvol" = "xY" ]; then
         btrfs subvolume create /mnt/target/$BRrootsubvolname/usr
      fi
        echo -e "\n---------------UNMOUNTING ---------------"
        unmount
        echo -e "\n---------------MOUNTING SUBVOLUME $BRrootsubvolname---------------"
        mount -t btrfs -o compress=lzo,subvol=$BRrootsubvolname $BRroot /mnt/target 2>&1 && echo SUCCESS  || echo WARNING

      if [   -n "$BRhome" ]; then
         echo -e "\n---------------MOUNTING $BRhome (/home)---------------"
         if [ "x$BRhomesubvol" = "xn" ] || [ "x$BRhomesubvol" = "xN" ]; then
             mkdir /mnt/target/home
         fi
         mount $BRhome /mnt/target/home  2>&1 && echo SUCCESS  || echo WARNING
         BRhomefsystem=(`df -T | grep $BRhome | awk '{ print $2}'`)
       fi

      if [   -n "$BRboot" ]; then
         echo -e "\n---------------MOUNTING $BRboot (/boot)---------------"
         mkdir /mnt/target/boot
         mount $BRboot /mnt/target/boot  2>&1 && echo SUCCESS  || echo WARNING
         BRbootfsystem=(`df -T | grep $BRboot | awk '{ print $2}'`)
      fi

fi





echo -e "\n---------------GETTING TAR IMAGE---------------"

if [ -n "$BRfile" ]; then
  echo "Copying file..."
  cp $BRfile "/mnt/target/fullbackup.tgz"
fi

if [ -n "$BRurl" ]; then
  if [ -n "$BRusername" ]; then
    wget --user=$BRusername --password=$BRpassword -O /mnt/target/fullbackup.tgz $BRurl --tries=2
    if [ "$?" -ne "0" ]; then
    echo "Error downloading file"
    rm /mnt/target/fullbackup.tgz
    fi
  else
    wget -O /mnt/target/fullbackup.tgz $BRurl --tries=2
    if [ "$?" -ne "0" ]; then
      echo "Error downloading file"
      rm /mnt/target/fullbackup.tgz
    fi
  fi
fi


while [ ! -f /mnt/target/fullbackup.tgz ]; do
    
  echo -e "\nSelect an option or enter Q to quit"
  select c in "File" "URL" "Protected URL"; do
    if [ $REPLY = "q" ] || [ $REPLY = "Q" ]; then
      echo "Now quiting"
      if [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
      remountdeletesubvolumes
      fi
      cleanandunmount
    elif [ $REPLY = "1" ]; then
      while [ ! -f /mnt/target/fullbackup.tgz ]; do
	read -p "Enter the path of the backup file: " BRfile
	if [ ! -f $BRfile ] || [ -z $BRfile ]; then
	  echo "File not found"
	else
	   echo "Copying file..."
           cp $BRfile "/mnt/target/fullbackup.tgz"
       	fi
      done
      break
      
    elif [ $REPLY = "2" ] || [ $REPLY = "3" ]; then
      read -p "Enter the URL for the backup file: " BRurl
      echo " "
      if [ $REPLY = "3" ]; then
	read -p "Enter the username: " BRusername
	read -sp "Enter the password: " BRpassword
	echo " "
	wget --user=$BRusername --password=$BRpassword  -O /mnt/target/fullbackup.tgz $BRurl --tries=2
        if [ "$?" -ne "0" ]; then
	  echo "Error downloading file"
	  rm /mnt/target/fullbackup.tgz
        fi
	break
      fi
      wget -O /mnt/target/fullbackup.tgz $BRurl --tries=2
      if [ "$?" -ne "0" ]; then
	echo "Error downloading file"
	rm /mnt/target/fullbackup.tgz 
      fi
      break
    else
      echo "Please select a valid option from the list or enter Q to quit"
    fi
  done
done

echo -e "\nRoot Partition: $BRroot $BRfsystem"
echo "Swap Partition: $BRswap"
echo "Boot Partition: $BRboot $BRbootfsystem"
echo "Home Partition: $BRhome $BRhomefsystem"
echo "Bootloader Location:  $BRgrub $BRsyslinux"
echo -e "Backup File: $BRfile $BRurl\n"


if [ -z $def1 ]; then
  read -p "Do you want continue? (Y/n): " def1
fi

if [ "x$def1" = "xn" ] || [ "x$def1" = "xN" ]; then
 if [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
 remountdeletesubvolumes 
 fi
 cleanandunmount
fi  



echo -e "\n---------------EXTRACTING---------------"
tar xvpfz /mnt/target/fullbackup.tgz -C /mnt/target   2>&1 && echo SUCCESS  || echo WARNING  
sleep 1


echo -e "\n---------------MOUNTING /dev /proc /sys---------------"
mount --bind /dev /mnt/target/dev
mount -t proc /proc /mnt/target/proc
mount -t sysfs /sys /mnt/target/sys 2>&1 && echo SUCCESS  || echo FAILED
sleep 1

echo -e "\n---------------GENERATING FSTAB---------------"
echo  "tmpfs     /tmp          tmpfs     nodev,nosuid      0  0" > /mnt/target/etc/fstab 

if [ "x$BRrootsubvol" = "xy" ] || [ "x$BRrootsubvol" = "xY" ]; then
 echo "$BRroot   /  btrfs compress=lzo,subvol=$BRrootsubvolname,noatime 0 0" >> /mnt/target/etc/fstab
elif [ "x$BRrootsubvol" = "xn" ] || [ "x$BRrootsubvol" = "xN" ] || [ "x$BRfsystem" = "xbtrfs" ]; then
 echo "$BRroot  /  btrfs  defaults,noatime    0  0" >> /mnt/target/etc/fstab
else
 echo "$BRroot  /  $BRfsystem  defaults,noatime    0  1" >> /mnt/target/etc/fstab
fi

if [ -n "$BRswap" ]; then
  echo "$BRswap    swap   swap    defaults    0  0" >> /mnt/target/etc/fstab
fi

if [ -n "$BRhome" ]; then
  echo "$BRhome  /home  $BRhomefsystem  defaults,noatime    0  2" >> /mnt/target/etc/fstab
fi

if [ -n "$BRboot" ]; then
  echo "$BRboot  /boot  $BRbootfsystem  defaults    0  1" >> /mnt/target/etc/fstab
fi

sed -n 's|^/dev/\([sh]d[a-z][0-9]\).*|\1|p' </mnt/target/etc/fstab > /mnt/target/etc/fstab2

while read LINE; do   
  UUID=`ls -l /dev/disk/by-uuid | grep "$LINE" | sed -n 's/^.* \([^ ]*\) -> .*$/\1/p'`
  sed -i "s|^/dev/${LINE}|UUID=${UUID}|" /mnt/target/etc/fstab
done </mnt/target/etc/fstab2
  
rm /mnt/target/etc/fstab2
cat /mnt/target/etc/fstab
sleep 1

echo -e "\n---------------REBUILDING INITRAMFS IMAGE---------------"
if [ $BRdistro = Arch ]; then
  chroot /mnt/target mkinitcpio -p linux  2>&1 && echo SUCCESS  || echo WARNING
elif [ $BRdistro = Debian ]; then

  list=(`ls /mnt/target/boot/vmlinuz* | sed 's_/mnt/target/boot/vmlinuz-*__'`)
  BRmax=${list[0]}
  for f in ${list[@]}; do
    if [[ "$f" > "$BRmax" ]]; then
      BRmax=$f
    fi
  done
  BRinitrd=$BRmax
  chroot /mnt/target update-initramfs -u -k $BRinitrd 2>&1 && echo SUCCESS  || echo WARNING

elif [ $BRdistro = Fedora ]; then

  list=(`ls /mnt/target/boot/vmlinuz* | sed 's_/mnt/target/boot/vmlinuz-*__'`)
  BRmax=${list[0]}
  for f in ${list[@]}; do
    if [[ "$f" > "$BRmax" ]]; then
      BRmax=$f
    fi
  done
  BRinitrd=$BRmax  
  chroot /mnt/target dracut --force /boot/initramfs-$BRinitrd.img $BRinitrd 2>&1 && echo SUCCESS  || echo WARNING
fi

sleep 1

if [ -n "$BRgrub" ]; then
  echo -e "\n---------------INSTALLING AND UPDATING GRUB2 IN $BRgrub---------------"
  if [ $BRdistro = Arch ]; then
    chroot /mnt/target grub-install --target=i386-pc  $BRgrub 
    chroot /mnt/target grub-mkconfig -o /boot/grub/grub.cfg  2>&1 && echo SUCCESS  || echo FAILED 
  elif [ $BRdistro = Debian ]; then
    chroot /mnt/target grub-install  $BRgrub
    chroot /mnt/target grub-mkconfig -o /boot/grub/grub.cfg  2>&1 && echo SUCCESS  || echo FAILED 
  elif [ $BRdistro = Fedora ]; then
    chroot /mnt/target grub2-install $BRgrub
    chroot /mnt/target grub2-mkconfig -o /boot/grub2/grub.cfg  2>&1 && echo SUCCESS  || echo FAILED 
  fi
elif [ -n "$BRsyslinux" ]; then
  echo -e "\n---------------INSTALLING AND CONFIGURING Syslinux IN $BRsyslinux---------------"
  if [ $BRdistro = Arch ]; then
    chroot /mnt/target syslinux-install_update -i -a -m
    echo -e "UI menu.c32\nPROMPT 0\nMENU TITLE Boot Menu\nTIMEOUT 50\nDEFAULT arch" > /mnt/target/boot/syslinux/syslinux.cfg
    echo -e "LABEL arch\n    MENU LABEL Arch Linux\n    LINUX ../vmlinuz-linux\n    APPEND root=$BRroot  ro\n    INITRD ../initramfs-linux.img" >> /mnt/target/boot/syslinux/syslinux.cfg
    echo -e "LABEL archfallback\n    MENU LABEL Arch Linux Fallback\n    LINUX ../vmlinuz-linux\n    APPEND root=$BRroot  ro\n    INITRD ../initramfs-linux-fallback.img" >> /mnt/target/boot/syslinux/syslinux.cfg
  elif [ $BRdistro = Debian ]; then
  mkdir -p /mnt/target/boot/syslinux
  chroot /mnt/target extlinux -i /boot/syslinux
  if [ -n "$BRboot" ]; then
    BRdev=`echo $BRboot | cut -c -8`
    BRpart=`echo $BRboot | cut -c 9-`
    sfdisk $BRdev -A $BRpart
  else
    BRdev=`echo $BRroot | cut -c -8`
    BRpart=`echo $BRroot | cut -c 9-`
    sfdisk $BRdev -A $BRpart
  fi  
  dd bs=440 count=1 conv=notrunc if=/mnt/target/usr/lib/syslinux/mbr.bin of=$BRsyslinux
  cp /mnt/target/usr/lib/syslinux/menu.c32 /mnt/target/boot/syslinux/
  echo -e "UI menu.c32\nPROMPT 0\nMENU TITLE Boot Menu\nTIMEOUT 50" > /mnt/target/boot/syslinux/syslinux.cfg
  echo -e "PROMPT 1\nTIMEOUT 50\nDEFAULT linux" >> /mnt/target/boot/syslinux/syslinux.cfg
  echo -e "LABEL linux\n\tLINUX ../vmlinuz-$BRinitrd\n\tAPPEND root=$BRroot ro\n\tINITRD ../initrd.img-$BRinitrd" >> /mnt/target/boot/syslinux/syslinux.cfg
  elif [ $BRdistro = Fedora ]; then
  mkdir -p /mnt/target/boot/syslinux
  chroot /mnt/target extlinux -i /boot/syslinux
  if [ -n "$BRboot" ]; then
    BRdev=`echo $BRboot | cut -c -8`
    BRpart=`echo $BRboot | cut -c 9-`
    sfdisk $BRdev -A $BRpart
  else
    BRdev=`echo $BRroot | cut -c -8`
    BRpart=`echo $BRroot | cut -c 9-`
    sfdisk $BRdev -A $BRpart
  fi
  dd bs=440 count=1 conv=notrunc if=/mnt/target/usr/share/syslinux/mbr.bin of=$BRsyslinux
  cp /mnt/target/usr/share/syslinux/menu.c32 /mnt/target/boot/syslinux/
  echo -e "UI menu.c32\nPROMPT 0\nMENU TITLE Boot Menu\nTIMEOUT 50" > /mnt/target/boot/syslinux/syslinux.cfg
  echo -e "PROMPT 1\nTIMEOUT 50\nDEFAULT linux" >> /mnt/target/boot/syslinux/syslinux.cfg
  echo -e "LABEL linux\n\tLINUX ../vmlinuz-$BRinitrd\n\tAPPEND root=$BRroot ro\n\tINITRD ../initramfs-$BRinitrd.img" >> /mnt/target/boot/syslinux/syslinux.cfg
  fi
fi

echo -e "\n---------------GENERATING LOCALES---------------"
if [ $BRdistro = Fedora ]; then
  chroot /mnt/target localedef -f UTF-8 -i en_US en_US.UTF-8 2>&1 && echo SUCCESS || echo WARNING
else
  chroot /mnt/target  locale-gen   2>&1 && echo SUCCESS || echo WARNING
fi
sleep 1

echo -e "\nCompleted. Press ENTER to unmount and clean, then reboot your system." 
read -s a

sleep 2

umount /mnt/target/dev
umount /mnt/target/proc
umount /mnt/target/sys
cleanandunmount


